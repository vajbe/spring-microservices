services:
  rabbit:
    image: rabbitmq:3.13-management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    extends:
      file: common-config.yml
      service: network-deploy-service

  configserver:
    image: "demobank/configserver:s4"
#    build:
#      context: configserver
#      dockerfile: Dockerfile
    container_name: configserver-ms
    ports:
      - "8071:8071"
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config

  accounts:
    image: "demobank/accounts:latest"
    container_name: accounts-ms
    build:
      context: accounts
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      configserver:
        condition: service_started
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      SPRING_DATASOURCE_URL: "jdbc:mysql://accountsdb:3306/accountsdb"
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  loans:
    build:
      context: loans
      dockerfile: Dockerfile
    image: "demobank/loans:s4"
    container_name: loans-ms
    ports:
      - "8090:8090"
    depends_on:
      configserver:
        condition: service_started
    environment:
      SPRING_APPLICATION_NAME: "loans"
      SPRING_DATASOURCE_URL: "jdbc:mysql://loansdb:3306/loansdb"
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  cards:
    image: "demobank/cards:s4"
    container_name: cards-ms
    ports:
      - "9000:9000"
    depends_on:
      configserver:
        condition: service_started
    environment:
      SPRING_APPLICATION_NAME: "cards"
      SPRING_DATASOURCE_URL: "jdbc:mysql://cardsdb:3306/cardsdb"
    extends:
      file: common-config.yml
      service: microservice-configserver-config
  accountsdb:
    image: mysql:8.0 # or use the custom image you built
    container_name: accounts-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: accountsdb
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql # If you have initialization scripts
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  cardsdb:
    image: mysql:8.0 # or use the custom image you built
    container_name: cards-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: cardsdb
    ports:
      - "3308:3306"
    volumes:
      - mysql_data2:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql # If you have initialization scripts
    extends:
      file: common-config.yml
      service: microservice-configserver-config
  loansdb:
    image: mysql:8.0 # or use the custom image you built
    container_name: loans-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: loansdb
    ports:
      - "3307:3306"
    volumes:
      - mysql_data3:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql # If you have initialization scripts
    extends:
      file: common-config.yml
      service: microservice-configserver-config

networks:
  demobank-network:
    driver: bridge
volumes:
  mysql_data:
  mysql_data2:
  mysql_data3:
